---
AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: An Elasticache AuthToken rotator.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: elasticache-auth-token-rotator
    Description: >-
      A Secrets Manager rotation Lambda Function which can rotate the auth token
      for ElastiCache replication groups, along with a secret target attachement
      Lambda Function for use as a CloudFormation custom resource.
    Author: Christopher Osborn
    SpdxLicenseId: Apache-2.0
    LicenseUrl: ./LICENSE
    ReadmeUrl: ./README.md
    Labels:
    - cimpress
    - caching
    - redis
    - elasticache
    - replication-group
    - rotate
    - rotation
    - rotator
    - auth-token
    HomePageUrl: https://github.com/Cimpress-MCP/ElastiCache-Auth-Token-Rotator
    SemanticVersion: 3.0.0
    SourceCodeUrl: https://github.com/Cimpress-MCP/ElastiCache-Auth-Token-Rotator

Parameters:
  Endpoint:
    Default: ''
    Description: The Secrets Manager endpoint to hit.
    Type: String
  FunctionName:
    Description: The name of the Lambda Function.
    Type: String
  InvokingServicePrincipal:
    Default: ''
    Description: The service principal of the invoking service.
    Type: String
  KmsKeyArn:
    Default: ''
    Description: The KMS key used to encrypt the secret being rotated.
    Type: String
  ReplicationGroupId:
    Description: The name of the replication group whose password will be rotated.
    Type: String
  SecretId:
    Description: The secret which stores the replication group password.
    Type: String
  VpcSubnetIds:
    Type: CommaDelimitedList
    Description: A list of VPC subnet IDs.
  VpcSecurityGroupIds:
    Type: CommaDelimitedList
    Description: A list of VPC security group IDs.

Conditions:
  EndpointExists: !Not [ !Equals [ '', !Ref Endpoint ] ]
  InvokingServicePrincipalExists: !Not [ !Equals [ '', !Ref InvokingServicePrincipal ] ]
  KmsKeyArnExists: !Not [ !Equals [ '', !Ref KmsKeyArn ] ]

Globals:
  Function:
    Runtime: python3.9
    KmsKeyArn: !If
    - KmsKeyArnExists
    - !Ref KmsKeyArn
    - !Ref AWS::NoValue
    Environment:
      Variables:
        SECRETS_MANAGER_ENDPOINT: !If
        - EndpointExists
        - !Ref Endpoint
        - !Sub https://secretsmanager.${AWS::Region}.${AWS::URLSuffix}

Resources:
  SecretDecryptionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: KmsKeyArnExists
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: kms:DescribeKey
          Resource: !Ref KmsKeyArn
          Condition:
            StringEquals:
              kms:ViaService: !Sub secretsmanager.${AWS::Region}.${AWS::URLSuffix}
        - Effect: Allow
          Action:
          - kms:Decrypt
          - kms:GenerateDataKey*
          Resource: !Ref KmsKeyArn
          Condition:
            StringEquals:
              kms:ViaService: !Sub secretsmanager.${AWS::Region}.${AWS::URLSuffix}
            ArnLike:
              kms:EncryptionContext:SecretARN: !Ref SecretId
  SecretsManagerAuthTokenRotation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref FunctionName
      Description: Conducts an AWS Secrets Manager rotation for ElastiCache Replication Group auth token
      CodeUri: ./rotator/
      Handler: rotator.handle
      Timeout: 300
      Layers:
      - !Ref SecretsManagerAuthTokenLayer
      Policies:
      - AWSSecretsManagerRotationPolicy:
          FunctionName: !Ref FunctionName
      - Version: 2012-10-17
        Id: RotateAuthToken
        Statement:
          Effect: Allow
          Action:
          - elasticache:DescribeReplicationGroups
          - elasticache:ModifyReplicationGroup
          Resource: !Sub arn:${AWS::Partition}:elasticache:${AWS::Region}:${AWS::AccountId}:replicationgroup:${ReplicationGroupId}
      - !If [ KmsKeyArnExists, !Ref SecretDecryptionPolicy, !Ref AWS::NoValue ]
      VpcConfig:
        SubnetIds: !Ref VpcSubnetIds
        SecurityGroupIds: !Ref VpcSecurityGroupIds
      Tags:
        SecretsManagerLambda: Rotation
  SecretsManagerAuthTokenRotationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SecretsManagerAuthTokenRotation.Arn
      Principal: !If
      - InvokingServicePrincipalExists
      - !Ref InvokingServicePrincipal
      - !Sub secretsmanager.${AWS::URLSuffix}
  SecretsManagerAuthTokenLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
      - python3.9
      ContentUri: ./layer
      Description: A vendored layer for AuthToken rotation.
    Metadata:
      BuildMethod: python3.9
  SecretsManagerElastiCacheSecretTargetAttachment:
    Type: AWS::Serverless::Function
    Properties:
      Description: Completes the final link between a Secrets Manager secret and its associated cache cluster
      CodeUri: ./attacher/
      Handler: attacher.handle
      Timeout: 30
      Layers:
      - !Ref SecretsManagerAuthTokenLayer
      Policies:
      - Version: 2012-10-17
        Id: RetrieveConnectionInformation
        Statement:
        - Effect: Allow
          Action: elasticache:DescribeReplicationGroups
          Resource: !Sub arn:${AWS::Partition}:elasticache:${AWS::Region}:${AWS::AccountId}:replicationgroup:${ReplicationGroupId}
        - Effect: Allow
          Action: secretsmanager:GetSecretValue
          Resource: !Ref SecretId
          Condition:
            ForAnyValue:StringEquals:
              secretsmanager:VersionStage: AWSCURRENT
        - Effect: Allow
          Action: secretsmanager:PutSecretValue
          Resource: !Ref SecretId
      - !If [ KmsKeyArnExists, !Ref SecretDecryptionPolicy, !Ref AWS::NoValue ]
  SecretsManagerElastiCacheSecretTargetAttachmentRotator:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SecretsManagerElastiCacheSecretTargetAttachment.Arn
      SecretId: !Ref SecretId
      TargetId: !Ref ReplicationGroupId
      TargetType: AWS::ElastiCache::ReplicationGroup

Outputs:
  RotationLambdaARN:
    Description: The ARN of the rotation Lambda Function
    Value: !GetAtt SecretsManagerAuthTokenRotation.Arn
